#pragma kernel AppendNode NUM_THREAD_X=32

#pragma multi_compile _ IGNORE_ORIGIN
#pragma multi_compile _ COLOR_ENABLE

#include "GpuTrailCSInclude.cginc"

uint _InputCount;
StructuredBuffer<float3> _InputBuffer_Pos;
#ifdef COLOR_ENABLE
StructuredBuffer<float4> _InputBuffer_Color;
#endif
RWStructuredBuffer<Trail> _TrailBuffer;
RWStructuredBuffer<Node> _NodeBuffer;

[numthreads(NUM_THREAD_X,1,1)]
void AppendNode (uint3 id : SV_DispatchThreadID)
{
	uint trailIdx = id.x;
	if ( trailIdx < _TrailNum )
	{
		Trail trail = _TrailBuffer[trailIdx];
		uint totalInputNum = trail.totalInputNum;

		for(uint i = 0; i<_InputCount; ++i)
		{
			uint inputBufferIdx = _TrailNum * i + trailIdx;
			float3 inputPos = _InputBuffer_Pos[inputBufferIdx];

	#ifdef IGNORE_ORIGIN
			if (all(inputPos == 0)) continue;
	#endif

			bool isFirst = (totalInputNum==0);
			if ( isFirst || (_MinNodeDistance <= distance(inputPos, _NodeBuffer[calcNodeIdx(trailIdx, totalInputNum-1)].pos)))
			{
				Node node = (Node)0;
				node.pos = inputPos;
				node.time = _Time;
	#ifdef COLOR_ENABLE
				node.color = _InputBuffer_Color[inputBufferIdx];
	#endif
				uint nodeIdx = calcNodeIdx(trailIdx, totalInputNum);
				_NodeBuffer[nodeIdx] = node;

				if (isFirst) trail.startTime = _Time;
				totalInputNum++;
			}
		}

		if( totalInputNum != trail.totalInputNum)
		{
			trail.totalInputNum = totalInputNum;
			_TrailBuffer[trailIdx] = trail;
		}
	}
}