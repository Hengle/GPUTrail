#pragma kernel CalcLod NUM_THREAD_X=32

#include "GpuTrailCSInclude.cginc"

////////////////////////////////////////////////////////////////////////////////
// UpdateTrailIdxBuffer
////////////////////////////////////////////////////////////////////////////////
float3 _CameraPos;
StructuredBuffer<Node> _NodeBuffer;
StructuredBuffer<float> _LodDistanceBuffer; // Order By distance
RWStructuredBuffer<uint> _TrailLodBuffer;

[numthreads(NUM_THREAD_X,1,1)]
void CalcLod (uint3 id : SV_DispatchThreadID)
{
	uint trailIdx = id.x;
	if ( trailIdx < _TrailNum )
	{
		float minDistanceSq = -1.0;

		uint nodeIdxStart = calcNodeIdx(trailIdx, 0);
		uint nodeIdxEnd = nodeIdxStart + _NodeNumPerTrail;
		for(uint nodeIdx = nodeIdxStart; nodeIdx < nodeIdxEnd; nodeIdx++)
		{
			Node node = _NodeBuffer[nodeIdx];
			if ( node.time > 0)
			{
				float3 posFromCamera = node.pos - _CameraPos;
				float distanceSq = dot(posFromCamera, posFromCamera);

				minDistanceSq = (minDistanceSq<0) ? distanceSq : min(minDistanceSq, distanceSq);
			}
		}
	

		float minDistance = sqrt(minDistanceSq);

		uint num, stride;
		_LodDistanceBuffer.GetDimensions(num, stride);

		for(uint nextLod=1; nextLod<num; ++nextLod)
		{
			if (minDistance < _LodDistanceBuffer[nextLod])
			{
				break;
			}
		}

		_TrailLodBuffer[trailIdx] = nextLod-1;
	}
}
